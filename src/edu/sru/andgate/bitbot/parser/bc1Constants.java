/* Generated By:JJTree&JavaCC: Do not edit this line. bc1Constants.java */
package edu.sru.andgate.bitbot.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface bc1Constants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 7;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 8;
  /** RegularExpression Id. */
  int HEX_LITERAL = 9;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 10;
  /** RegularExpression Id. */
  int BOOL_OP = 11;
  /** RegularExpression Id. */
  int EQ_OP = 12;
  /** RegularExpression Id. */
  int REL_OP = 13;
  /** RegularExpression Id. */
  int ADD_OP = 14;
  /** RegularExpression Id. */
  int MUL_OP = 15;
  /** RegularExpression Id. */
  int CONCAT = 16;
  /** RegularExpression Id. */
  int PRINT = 17;
  /** RegularExpression Id. */
  int LET = 18;
  /** RegularExpression Id. */
  int EQUAL = 19;
  /** RegularExpression Id. */
  int DIM = 20;
  /** RegularExpression Id. */
  int AS = 21;
  /** RegularExpression Id. */
  int WHILE = 22;
  /** RegularExpression Id. */
  int DO = 23;
  /** RegularExpression Id. */
  int LOOP = 24;
  /** RegularExpression Id. */
  int FOR = 25;
  /** RegularExpression Id. */
  int TO = 26;
  /** RegularExpression Id. */
  int STEP = 27;
  /** RegularExpression Id. */
  int NEXT = 28;
  /** RegularExpression Id. */
  int IF = 29;
  /** RegularExpression Id. */
  int THEN = 30;
  /** RegularExpression Id. */
  int ELSE = 31;
  /** RegularExpression Id. */
  int ENDIF = 32;
  /** RegularExpression Id. */
  int INTEGER = 33;
  /** RegularExpression Id. */
  int SUBROUTINE = 34;
  /** RegularExpression Id. */
  int CALL = 35;
  /** RegularExpression Id. */
  int END = 36;
  /** RegularExpression Id. */
  int IDENTIFIER = 37;
  /** RegularExpression Id. */
  int LETTER = 38;
  /** RegularExpression Id. */
  int DIGIT = 39;
  /** RegularExpression Id. */
  int STRING_LITERAL = 40;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<BOOL_OP>",
    "<EQ_OP>",
    "<REL_OP>",
    "<ADD_OP>",
    "<MUL_OP>",
    "\"&\"",
    "\"print\"",
    "\"let\"",
    "\"=\"",
    "\"dim\"",
    "\"as\"",
    "\"while\"",
    "\"do\"",
    "\"loop\"",
    "\"for\"",
    "\"to\"",
    "\"step\"",
    "\"next\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"endif\"",
    "\"integer\"",
    "<SUBROUTINE>",
    "\"call\"",
    "\"end\"",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
    "<STRING_LITERAL>",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\",\"",
  };

}
