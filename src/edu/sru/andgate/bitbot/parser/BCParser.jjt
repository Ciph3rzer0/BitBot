/**
 * JJTree template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  IGNORE_CASE = true;
  STATIC = false;
//  DEBUG_PARSER = true; 
  VISITOR = true;
  MULTI = true; 
}
 
PARSER_BEGIN(bc1)
package edu.sru.andgate.bitbot.parser;

public class bc1
{


  // This code is key to imitating the left recursiveness that expressions
  // exhibit, but JavaCC disallows us from using.
  public void NodeMagic(SimpleNode newN, String op)
  {
    Node n;
    
    newN.value = op;
    
    // Pop and add the first operand from the stack
    n = jjtree.popNode();
    newN.jjtAddChild(n, 1);
    n.jjtSetParent(newN);
    
    // Pop and add the second operand from the stack
    n = jjtree.popNode();
    newN.jjtAddChild(n, 0);
    n.jjtSetParent(newN);
    
    // Push the new node back on the stack
    jjtree.pushNode(newN);
  }
}
PARSER_END(bc1)

/* Skip Whitespace & comments */
SKIP :
{
  " "
| "\t"
// Multi-line comments cause problems with error reporting, giving incorrect line numbers.
//| < "/*" (~[ "*" ])* "*"//    (//      ~[ "/" ] (~[ "*" ])* "*"//    )*//    "/" >
}

TOKEN : /* NUMBER LITERAL */
{
 < NUMBER :
  < NUMBER_EL >
  (
   ("e" | "E")
   < NUMBER_EL >
  )?
 >
 
|< #NUMBER_EL :
  ( "+" | "-" )?
  
  (
    ( <DIGIT> )+
    |
    (
      ( <DIGIT> )*
      ( "." )
      ( <DIGIT> )+
    )
    |
    (
      ( <DIGIT> )+
      ( "." )
      ( <DIGIT> )*
    )
  )
 >
}

TOKEN : /* OPERATIONS */
{
  < BOOL_OP : "AND" | "OR" >
| < EQ_OP : "==" | "!=" >
| < REL_OP : "<" | ">" | "<=" | ">=" > 
| < ADD_OP : "+" | "-" >
| < MUL_OP : "*" | "/" | "%" >
//| < POW_OP : "^" >
| < CONCAT : "&" >
}

TOKEN : /* RESERVED WORDS */
{
  < NL : ("\n" | "\r" | "\r\n"
  // A comment must be counted as a newline
  | "//" (~[ "\n", "\r" ])*
    (
      "\n"
    | "\r"
    | "\r\n"
    )
  ) >  // Statement Terminator

| < PRINT : "print" >
| < LET : "let" >
| < EQUAL : "=" | "eq" >
| < DIM : "dim" >
| < AS : "as" >

| < WHILE : "while" >
| < DO : "do" >
| < LOOP : "loop" >

| < FOR : "for" >
| < TO : "to" >
| < STEP : "step" >
| < NEXT : "next" >

| < IF : "if" >
| < THEN : "then" >
| < ELSE : "else" >
| < ENDIF : "endif" >

| < INTEGER : "integer" >
| < DOUBLE : "double" >
| < STRING : "string" >
| < ARRAY : "array" >
| < SUBROUTINE : "subroutine" | "sub" >
| < WITH : "with" >
| < CALL: "call">
| < END: "end" >
| < RETURN: "return" >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER :
    < LETTER >
    (
      < LETTER >
    | < DIGIT >
    )* >
| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >
| < #DIGIT : [ "0"-"9" ] >
| < STRING_LITERAL : "\"" (~["\""])* "\"" >
}

SimpleNode Start() #Root :
{}
{
  Program()
  {
    return jjtThis;
  }
}

void Program() :
{}
{
  ListOfInstructions()
  
  (
    < END >
    
    ( < NL > )+
    
    // Subroutines
    (
      SubDef()
      ( < NL > )+
    )*
  )?
  
  < EOF >
}

void ListOfInstructions() :
{}
{
  (
  	( < NL > )*
    Instruction()
    ( < NL > )+
  )*
}

void Instruction() #void :
{}
{
  Expression()
  |
  Assignment()
  | 
  Print()
  |
  Declaration()
  |
  SubCall() 
  |
  WhileLoop()
  |
  IfStatement()
  |
  ForLoop()
}

void WhileLoop() :
{}
{
  < WHILE > Expression() < DO > <NL> ListOfInstructions() < LOOP >
}

void IfStatement() :
{}
{
  < IF > Expression() < THEN > < NL >
  
  ListOfInstructions()
  ( < ELSE > < NL >
    ListOfInstructions()
  )?
  
  < ENDIF >
}

void ForLoop() :
{}
{
  < FOR > Identifier() ( < EQUAL > )? Expression() < TO > Expression() ( < STEP > Expression() ) ? < NL >
    ListOfInstructions()
  < NEXT >
}


void SubCall() :
{}
{
  < CALL > Identifier() "(" ParameterList() ")"
}

void ParameterList() #void :
{}
{
  (
  Expression() ( "," Expression() )*
  )?
}

void SubDef() :
{}
{
  < SUBROUTINE > Identifier() ( < WITH > )? ParameterList() < NL >
    ListOfInstructions()
  < RETURN >
}

void Print() :
{}
{
  < PRINT > Expression() 
}

void Declaration() :
{}
{
  < DIM > Identifier() < AS > < INTEGER > ( ( < EQUAL > )? Expression() )?
}

void Assignment() :
{}
{
   < LET > Identifier() ( < EQUAL > )?  Expression()
}

/* ----------------------- */

void Expression() #void :
{}
{
  ConcatExpression() {}
}

void ConcatExpression() #ConcatExpression(>1) :
{
  Token t;
  String op = "err";
}
{
  StringExpression()
  (
    t = < CONCAT > { op = t.image; }
    
    StringExpression()
    {
      ASTConcatExpression newN = new ASTConcatExpression(bc1TreeConstants.JJTCONCATEXPRESSION);
      NodeMagic(newN, op);
    }
  )*
}

void StringExpression() #void :
{}
{
  BooleanExpression() | StringLiteral()
}

void StringLiteral() :
{
  Token t;
}
{
  t = < STRING_LITERAL > { jjtThis.value = t.image; }
}

void BooleanExpression() #BooleanExpression(>1) :
{
  Token t;
  String op = "err";
}
{
  EqualityExpression()
  (
    t = < BOOL_OP > { op = t.image; }
    
    EqualityExpression()
    {
      ASTBooleanExpression newN = new ASTBooleanExpression(bc1TreeConstants.JJTBOOLEANEXPRESSION);
      NodeMagic(newN, op);
    }
  )*
}

void EqualityExpression() #EqualityExpression(>1) :
{
  Token t;
  String op = "err";
}
{
  RelationalExpression()
  (
    t = < EQ_OP > { op = t.image; }
    
    RelationalExpression()
    {
      ASTEqualityExpression newN = new ASTEqualityExpression(bc1TreeConstants.JJTEQUALITYEXPRESSION);
      NodeMagic(newN, op);
    }
  )*
}

void RelationalExpression() #RelationalExpression(>1) :
{
  Token t;
  String op = "err";
}
{
  AdditiveExpression()
  (
    t = < REL_OP > { op = t.image; }
    
    AdditiveExpression()
    {
      ASTRelationalExpression newN = new ASTRelationalExpression(bc1TreeConstants.JJTRELATIONALEXPRESSION);
      NodeMagic(newN, op);
    }
  )*
}

void AdditiveExpression() #AdditiveExpression(>1) :
{
  Token t;
  String op = "err";
}
{
  MultiplicativeExpression()
  
  ( 
    t = < ADD_OP > { op = t.image; }		// Store the operation.
    
    MultiplicativeExpression()
    {
      ASTAdditiveExpression newN = new ASTAdditiveExpression(bc1TreeConstants.JJTADDITIVEEXPRESSION);
      NodeMagic(newN, op);
    }
  )*
  
}

void MultiplicativeExpression() #MultiplicativeExpression(>1) :
{
  Token t;
  String op = "err";
}
{
  UnaryExpression()
  (
    t = < MUL_OP > { op = t.image; }
    
    UnaryExpression()
    {
      ASTMultiplicativeExpression newN = new ASTMultiplicativeExpression(bc1TreeConstants.JJTMULTIPLICATIVEEXPRESSION);
      NodeMagic(newN, op);
    }
  )*
  
}

void UnaryExpression() #void :
{}
{
  "(" Expression() ")"
| UnaryPlusOrMinus()
| Identifier()
| Integer()
}

void UnaryPlusOrMinus() #UnaryExpression :
{
Token t;
}
{
   t = < ADD_OP > { jjtThis.value = t.image; } UnaryExpression() 
}

void Identifier() :
{
  Token t;
}
{
  t = < IDENTIFIER > { jjtThis.value = t.image.toLowerCase(); }
}

void Integer() #NumberLiteral :
{
  Token t;
}
{
  t = < NUMBER > { jjtThis.value = t.image; }
}
